import os
import random
import streamlit as st
import nltk
from gtts import gTTS

# Import the new AdvancedTextProcessor
from text_processor import AdvancedTextProcessor

class TextToSpeech:
    def __init__(self, output_dir='audio_outputs'):
        self.output_dir = output_dir
        os.makedirs(output_dir, exist_ok=True)
    
    def generate_speech(self, text, language='en', filename=None):
        """
        Generate speech from text using Google Text-to-Speech
        """
        if not filename:
            filename = f"speech_{language}_{hash(text)}.mp3"
        
        file_path = os.path.join(self.output_dir, filename)
        
        try:
            # Generate speech
            tts = gTTS(text=text, lang=language)
            tts.save(file_path)
            return file_path
        except Exception as e:
            st.error(f"Error generating speech: {e}")
            return None
    
    def play_audio(self, audio_file):
        """
        Play audio file in Streamlit
        """
        if audio_file and os.path.exists(audio_file):
            with open(audio_file, 'rb') as audio:
                st.audio(audio.read(), format='audio/mp3')

def main():
    st.set_page_config(
        page_title="Text Deep Dive Analyzer",
        page_icon="üìù",
        layout="wide"
    )
    
    st.title("üìù Advanced Text Explanation Generator")
    
    # Sidebar for configuration
    st.sidebar.header("üõ†Ô∏è Application Features")
    st.sidebar.info("""
    - Generate comprehensive text explanations
    - Extract key entities and insights
    - Multilingual voice generation
    """)
    
    # Text input with enhanced UI
    col1, col2 = st.columns([3, 1])
    
    with col1:
        input_text = st.text_area(
            "üìÑ Enter Text for Deep Analysis", 
            height=300, 
            placeholder="Paste your text here for comprehensive explanation..."
        )
    
    with col2:
        # Additional configuration options
        analysis_depth = st.selectbox(
            "Analysis Depth",
            ["Standard", "Detailed", "Comprehensive"],
            help="Choose the level of text analysis"
        )
        
        language_option = st.selectbox(
            "Output Language",
            ["English", "Bilingual (English & Urdu)"],
            help="Select the language for explanation and voice generation"
        )
    
    # Processor and TTS instances
    processor = AdvancedTextProcessor()
    tts = TextToSpeech()
    
    if st.button("üîç Analyze Text", type="primary"):
        if input_text:
            # Validate input length
            if len(input_text.split()) < 10:
                st.warning("Please enter a more substantial text for meaningful analysis.")
                return
            
            try:
                # Generate comprehensive explanation
                comprehensive_explanation = processor.generate_comprehensive_explanation(input_text)
                
                # Display results
                st.subheader("üåê Comprehensive Text Analysis")
                st.markdown(comprehensive_explanation)
                
                # Bilingual processing and voice generation
                if language_option == "Bilingual (English & Urdu)":
                    # Translate to Urdu
                    urdu_explanation = processor.translate_to_urdu(comprehensive_explanation)
                    
                    # Create columns for English and Urdu explanations
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.subheader("üá∫üá∏ English Explanation")
                        st.write(comprehensive_explanation)
                    
                    with col2:
                        st.subheader("üáµüá∞ Urdu Explanation")
                        st.write(urdu_explanation)
                
                # Audio generation
                st.subheader("üéß Audio Explanation")
                
                # Generate English audio
                english_audio = tts.generate_speech(comprehensive_explanation, language='en')
                st.audio(english_audio, format='audio/mp3')
                
                # Urdu audio for bilingual mode
                if language_option == "Bilingual (English & Urdu)":
                    urdu_audio = tts.generate_speech(urdu_explanation, language='ur')
                    st.audio(urdu_audio, format='audio/mp3')
            
            except Exception as e:
                st.error(f"An error occurred during text analysis: {e}")
        else:
            st.warning("Please enter some text to analyze.")

if __name__ == "__main__":
    main()
